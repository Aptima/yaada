project_name: "yaada"
description: "An example project file included in core repo" 
project_version: "7.0.1"
yaada_core_version: "7.0.1"
config: default.conf
env: # the default environments for this project
  - local
docker:
  # used to populate active YAADA_PROJECT_IMAGE environment variable
  tag: LATEST #required. one of [LATEST, VERSION, GITHASH]
  compose_project_name: yaada7 # required.
  project_image: yaada/yaada
  platform: amd64
  network: 
    name: yaada-shared-infrastructure
  composes:
    shared:
      file: docker/docker-compose-shared.yml
    shared-ports:
      file: docker/docker-compose-shared-ports.yml
    apps: 
      file: docker/docker-compose.yml
    apps-ports: 
      file: docker/docker-compose-ports.yml
  default_composes:
    - shared
    - shared-ports
    - apps
    - apps-ports
  # after_up:
  #   copy:
  #     - 
  #       source: ./a-local-file-path.json
  #       container: a-container-name
  #       dest: a-path-in-the-container
  #   run:
  #     - script-from-scripts-section arg1 arg2 etc
  build:
    yaada/mosquitto:
      image: yaada/mosquitto
      dockerfile: docker/mosquitto/Dockerfile
      context: docker/mosquitto
      build_args: # a map of argument/value pairs. May substitute in values from variables section using ${VARIABLE}.
        PLATFORM: ${DOCKER_PLATFORM}
    yaada/zenko-cloudserver:
      image: yaada/zenko-cloudserver
      dockerfile: docker/zenko-cloudserver/Dockerfile
      context: docker/zenko-cloudserver
      build_args: # a map of argument/value pairs. May substitute in values from variables section using ${VARIABLE}.
        PLATFORM: ${DOCKER_PLATFORM}
    yaada/yaada:
      image: yaada/yaada
      dockerfile: docker/yaada/Dockerfile
      context: .
      build_args: # a map of argument/value pairs. May substitute in values from variables section using ${VARIABLE}.
        YAADA_BASE_IMAGE: python:3.10
        PLATFORM: ${DOCKER_PLATFORM}
    yaada/dev:
      image: yaada/dev
      dockerfile: docker/dev/Dockerfile
      context: docker/dev
      build_args: # a map of argument/value pairs. May substitute in values from variables section using ${VARIABLE}.
        PLATFORM: ${DOCKER_PLATFORM}
variables:
  TRANSFORMERS_CACHE: modelscache/transformers 
  SENTENCE_TRANSFORMERS_HOME: modelscache/sentence_transformers
  TORCH_HOME: modelscache/torch
  NLTK_DATA: modelscache/nltk_data
script:
  openapi:
    command: yaada-openapi.py --debug
    stop_service: openapi
  ingest:
    command: yaada-ingest-pipeline.py
    stop_service: ingest
  sink:
    command: yaada-sink.py
    stop_service: sink
  sinklog:
    command: yaada-sinklog-writer.py
    stop_service: sink
  worker:
    command: yaada-worker.py
    stop_service: worker
  worker-docker:
    command: yaada-worker-docker.py
    stop_service: worker
  jupyter: 
    command: jupyter lab --allow-root notebooks
    stop_service: jupyter
  ipython:
    command: 
      - ipython
      - "-c"
      - "from IPython import get_ipython;ipython = get_ipython();ipython.run_line_magic('load_ext', 'autoreload');ipython.run_line_magic('autoreload', '2');from yaada.core.analytic.context import make_analytic_context;context=make_analytic_context('IPython',init_pipelines=False)"
      - "-i"
  ipython-no-context:
    command: 
      - ipython
      - "-c"
      - "from IPython import get_ipython;ipython = get_ipython();ipython.run_line_magic('load_ext', 'autoreload');ipython.run_line_magic('autoreload', '2')"
      - "-i"
  test:
    command: pytest
    cwd: tests/e2e
  test-nlp:
    command: pytest
    cwd: tests/nlp
  docs-serve:
    command: mkdocs serve
    cwd: site
  download-nlp-resources:
    command: yaada-download-default-nlp-resources.py
environments:
  local: {}
  pytorch:
    docker:
      project_image: yaada/yaada-pytorch
      build:
        yaada/yaada-pytorch:
          image: yaada/yaada-pytorch
          dockerfile: docker/yaada/Dockerfile
          context: .
          build_args: # a map of argument/value pairs. May substitute in values from variables section using ${VARIABLE}.
            YAADA_BASE_IMAGE: pytorch/pytorch:1.8.1-cuda11.1-cudnn8-runtime
s3:
  buckets:
    yaada: {} # with no overrides, will default to yaada's default bucket for your selected environment
    # some-real-s3-bucket:
    #   bucket: {real s3 bucket name}
    #   region: {region}
    #   endpoint: {aws endpoint -- see https://docs.aws.amazon.com/general/latest/gr/s3.html and lookup region} 
    #   access_key_id: {aws_access_key_id}
    #   secret_access_key: {aws_secret_access_key}

## set default environment variables for all environments  
# variables:
#   FOO: bar
## the following values allow you to override the defaults environment variables or context connection overrides.
## Null values or omission in realized config indicate using the defaults   
# hostname: Null # the hostname/ip to connect to the service
# tenant: Null # the project namespace for seperating project yaada data
# prefix: Null # the namespace to seperate yaada data from non-yaada data
# protocol: Null # http vs https
## mqtt specific overrides
# mqtt:
#   hostname: Null
#   tenant: Null
#   prefix: Null
#   port: Null
#   ingest: Null
#   sink: Null
#   sinklog: Null
# elasticsearch:
#   hostname: Null
#   tenant: Null
#   prefix: Null
#   protocol: Null
#   port: Null
# objectstorage:
#   enabled: false
#   hostname: Null
#   tenant: Null
#   prefix: Null
#   location: Null
#   bucket: Null
#   secure: Null
#   access_key_id: Null
#   secret_access_key: Null